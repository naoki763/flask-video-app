# 動画鑑賞アプリ

このアプリは、利用者が動画を投稿、閲覧し、コメントを通じてコミュニケーションを図ることができる動画ストリーミングプラットフォームです。また、管理者は効率的に利用者および動画を管理できます。

## 前提条件
このアプリの開発環境はVisual Studio Codeでの開発を前提としています。
ご利用前に以下がホストPCにインストールしてください
  * Visual Studio Code
  * Docker(Version2推奨)

また、Visual Studio Codeインストール後、以下の『Dev Containers』拡張機能を追加してください。
  * ms-vscode-remote.remote-containers

## 機能一覧

### 利用者管理

* **登録機能**: 新規利用者の登録
* **情報編集**: 利用者情報の編集
* **削除機能**: 利用者の削除

### ログイン機能

* **ログイン・ログアウト**: 利用者認証

### 動画管理

* **動画アップロード**: AWS S3への動画保存
* **動画閲覧**: 投稿動画の視聴
* **動画削除**: 不要な動画を削除

### コメント機能

* **コメント投稿**: 動画へのコメント投稿
* **コメント返信**: 投稿されたコメントへの返信

## 技術スタック

* **バックエンド**

  * 言語: Python 3.12
  * フレームワーク: Flask
  * ORM: SQLAlchemy

* **フロントエンド**

  * テンプレートエンジン: Jinja2
  * HTML/CSS, JavaScript

* **データベース**

  * PostgreSQL (AWS RDS)

* **インフラ**

  * terraform（インフラのIaC化）
  * AWS ECS（アプリケーションのホスティング）
  * AWS S3（動画保存）
  * AWS RDS（データベース）

* **開発ツール・環境**

  * Docker & Docker Compose
  * LocalStack
  * Visual Studio Code
  * uv
  * mise
  * go-task

## 開発環境詳細

### Dev Container

devcontainer は、Visual Studio Code（VSCode）向けの機能で、Dockerコンテナ内に開発環境を構築し、プロジェクトごとに独立した一貫性のある開発環境を提供する仕組みです。

これにより、環境設定や依存関係に関する問題を最小限に抑え、チームメンバー間で同一の開発環境を簡単に共有できます。

### uv

Pythonのパッケージ管理および仮想環境の作成・管理を効率化するための新しいPython向けツールです。
Rustで書かれており、既存のPythonツールより高速で、使いやすく、信頼性が高いことが特徴です。
以下は主なuvコマンドです。

* 新しいPythonプロジェクト作成
```bash
uv init
```
* プロジェクトに依存関係を追加
```bash
uv add <ライブラリ>
```

* プロジェクトに依存関係を削除
```bash
uv remove <ライブラリ>
```

* 仮想環境を作成
```bash
uv venv
```

* プロジェクトの依存関係を環境と同期
```bash
uv sync
```
* プロジェクト環境でコマンドを実行
```bash
uv run <コマンド>
```
  

### mise

プロジェクト単位で各種開発ツールやランタイム（Python、Node.js、Go、Rubyなど）のバージョンを簡単に管理できるツールです。
Rustで書かれており、高速で軽量な動作が特徴です。

miseは、複数のランタイムやバージョンを切り替えながら開発する際に特に有効で、プロジェクトごとの環境管理を効率化します。

* ツールをインストール（mise.tomlに追加される）\
  ツールを指定しなければmise.tomlに記載あるツールをインストールする
```bash
mise install <ツール>@version
```

* ツールをアンインストールする
```bash
mise uninstall <ツール>@version
```

* ツールのバージョンを指定する
```bash
mise use <ツール>@version
```

### ruff

Pythonコードのリンティングとフォーマットを高速に行うツールです。

* pythonコードをフォーマット
```bash
ruff format
```

* pythonコードの規約違反をチェック
```bash
ruff check
```

### go-task

go-task は、Makefileの代替として使える、簡潔で人間が読みやすいYAML形式のタスクランナーです。
Go言語で実装されており、プラットフォームに依存せず、開発時の繰り返し作業を自動化・簡素化できます。

* task.yamlに設定したtaskを表示する
```bash
task
```

### localstack

LocalStack は、AWSクラウドのサービス（S3、Lambda、DynamoDB、SQSなど）をローカルの開発環境上に擬似的に再現するエミュレータです。

開発者は、AWSの本番環境にアクセスせずとも、ローカルでAWSサービスの動作確認・開発・テストが可能になります。

今回利用するサービス
- S3
- cloudwatch


## プロジェクト構成

```
video-streaming-app/
├── app/
│   ├── api/             # APIエンドポイント
│   ├── models/          # データベースモデル
│   ├── templates/       # Jinja2テンプレート
│   ├── static/          # CSS, JS, 画像
│   ├── config.py        # アプリケーション設定
│   ├── factory.py       # Flaskアプリ作成
│   ├── main.py          # アプリケーション起動
│   └── run.py           # 開発用サーバー実行スクリプト
├── tests/               # テストスクリプト
├── docker/              # Docker設定
├── .env                 # 環境変数管理
├── pyproject.toml       # プロジェクト設定
└── README.md
```

## 開発環境利用方法

### セットアップ

1. DevContainerを開く.
  - VSCodeのコマンドパレットを開き「Dev Containers: Reopen in Container」を選択する。

2. LocalStackなどインフラ立ち上げ
vscodeのターミナルを開き、以下のコマンドを実行する

```bash
task dev-config
```

3. アプリ起動

```bash
task app-start
```
